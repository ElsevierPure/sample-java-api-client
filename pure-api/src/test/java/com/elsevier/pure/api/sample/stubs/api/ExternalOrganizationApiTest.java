/*
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * The version of the OpenAPI document: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elsevier.pure.api.sample.stubs.api;

import com.elsevier.pure.api.sample.stubs.invoker.ApiException;
import com.elsevier.pure.api.sample.stubs.model.*;
import org.junit.Ignore;
import org.junit.Test;

import java.util.List;

/**
 * API tests for ExternalOrganizationApi
 */
@Ignore
public class ExternalOrganizationApiTest {

    private final ExternalOrganizationApi api = new ExternalOrganizationApi();

    
    /**
     * Create external organization
     *
     * Create external organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        ExternalOrganization externalOrganization = null;
        ExternalOrganization response = api.create(externalOrganization);

        // TODO: test validations
    }
    
    /**
     * Delete external organization
     *
     * Delete external organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String uuid = null;
        api.delete(uuid);

        // TODO: test validations
    }
    
    /**
     * Get external organization
     *
     * Get external organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws ApiException {
        String uuid = null;
        ExternalOrganization response = api.get(uuid);

        // TODO: test validations
    }
    
    /**
     * A list of allowed address countries
     *
     * Get a list of allowed countries that can be used for the &#39;address.country&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressCountriesTest() throws ApiException {
        List<ClassificationRef> response = api.getAllowedAddressCountries();

        // TODO: test validations
    }
    
    /**
     * A list of allowed address subdivisions
     *
     * Get a list of allowed subdivisions that can be used for the &#39;address.subdivisions&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedAddressSubdivisionsTest() throws ApiException {
        List<ClassificationRef> response = api.getAllowedAddressSubdivisions();

        // TODO: test validations
    }
    
    /**
     * A list of allowed nature types
     *
     * Get a list of allowed nature types that can be used for the &#39;natureTypes&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedNatureTypesTest() throws ApiException {
        List<ClassificationRef> response = api.getAllowedNatureTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed external organization types
     *
     * Get a list of allowed types that can be used for the &#39;type&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedTypesTest() throws ApiException {
        List<ClassificationRef> response = api.getAllowedTypes();

        // TODO: test validations
    }
    
    /**
     * A list of allowed workflow steps
     *
     * Get a list of allowed workflow steps that can be used for the &#39;workflow&#39; attribute of external organizations
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllowedWorkflowStepsTest() throws ApiException {
        List<Workflow> response = api.getAllowedWorkflowSteps();

        // TODO: test validations
    }
    
    /**
     * Lists available orderings
     *
     * Lists all orderings available to the external organization endpoint. These values can be used by the order parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrderingsTest() throws ApiException {
        OrderingsList response = api.getOrderings();

        // TODO: test validations
    }
    
    /**
     * Lists all external organizations
     *
     * Lists all external organizations in the Pure instance. If you need to filter the external organizations returned, see the POST version which supports additional filtering.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        Integer size = null;
        Integer offset = null;
        String order = null;
        ExternalOrganizationListResult response = api.list(size, offset, order);

        // TODO: test validations
    }
    
    /**
     * Query operation for external organizations
     *
     * Lists external organizations in the Pure instance that matches the provided query, similar to the GET version, instead of using parameters to alter the response, an JSON document is posted with the request. The JSON document contains fields for all the parameters available for the GET version, but also additional filtering options.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryTest() throws ApiException {
        ExternalOrganizationsQuery externalOrganizationsQuery = null;
        ExternalOrganizationListResult response = api.query(externalOrganizationsQuery);

        // TODO: test validations
    }
    
    /**
     * Update external organization
     *
     * Update external organization with specific UUID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String uuid = null;
        ExternalOrganization externalOrganization = null;
        ExternalOrganization response = api.update(uuid, externalOrganization);

        // TODO: test validations
    }
    
}
